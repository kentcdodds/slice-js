exports[`test ./test/fixtures/cond-expr.slicer.js 1`] = `
"./test/fixtures/cond-expr.js: consequent-only
    /* eslint import/prefer-default-export:0, no-nested-ternary:0, no-unneeded-ternary:0 */
    export { isConstantOrAlternate };

    function isConstantOrAlternate(a) {
      return \'isConsequent\';
    }
./test/fixtures/cond-expr.js: alternate-only
    /* eslint import/prefer-default-export:0, no-nested-ternary:0, no-unneeded-ternary:0 */
    export { isConstantOrAlternate };

    function isConstantOrAlternate(a) {
      return a === \'consequent\' ? \'isConsequent\' : \'isAlternate\';
    }
./test/fixtures/cond-expr.js: alternate\'s consequent
    /* eslint import/prefer-default-export:0, no-nested-ternary:0, no-unneeded-ternary:0 */
    export { isConstantOrAlternate };

    function isConstantOrAlternate(a) {
      return a === \'consequent\' ? \'isConsequent\' : a === \'alternate\' ? \'isAlternate\' : \`isAlternate\'s Consequent\`;
    }
./test/fixtures/cond-expr.js: both consequent and alternate
    /* eslint import/prefer-default-export:0, no-nested-ternary:0, no-unneeded-ternary:0 */
    export { isConstantOrAlternate };

    function isConstantOrAlternate(a) {
      return a === \'consequent\' ? \'isConsequent\' : a === \'alternate\' ? \'isAlternate\' : \`isAlternate\'s Consequent\`;
    }
./test/fixtures/cond-expr.js: consequent, alternate, and alternate\'s consequent
    /* eslint import/prefer-default-export:0, no-nested-ternary:0, no-unneeded-ternary:0 */
    export { isConstantOrAlternate };

    function isConstantOrAlternate(a) {
      return a === \'consequent\' ? \'isConsequent\' : a === \'alternate\' ? \'isAlternate\' : \`isAlternate\'s Consequent\`;
    }
"
`;

exports[`test ./test/fixtures/module.slicer.js 1`] = `
"./test/fixtures/module.js: multiply multiplies numbers together
    /*
     * this file may seem odd, but trust me, this is intended to help
     * ensure we\'re developing a good slice, not to have a good math
     * module :)
     */
    export { sum, multiply };

    function sum(a, b) {
      return a + b;
    }

    function multiply(a, b) {
      let product, i;
      product = 0;
      for (i = 0; i < b; i++) {
        product = sum(product, a);
      }
      return product;
    }
"
`;
